Name:		@PACKAGE@
Version:	@VERSION@
Release:	@RELEASE@%{?dist}
Summary:	VE Operating System
Group:		System Environment/Daemons
License:	GPLv2+ and (LGPLv2+ and BSD and MIT)
#URL:
Source0:	@PACKAGE@-@VERSION@.tar.gz
Vendor:		NEC Corporation
BuildArch:	x86_64
BuildRequires:	libved-devel >= 2.99.0 velayout-devel
BuildRequires:	protobuf-c-devel log4c-devel systemd-devel libuuid-devel
BuildRequires:	libcap-devel
BuildRequires:	procps-ng-devel
BuildRequires:	protobuf-compiler
BuildRequires:  ve-memory-mapping-devel
BuildRequires:  libdhash-devel
Requires:	libved >= 2.99.0
Requires:	velayout
Requires:	protobuf-c log4c systemd-libs libuuid
Requires:	libcap
Requires:	procps-ng


Requires:	libdhash
Requires(pre):	systemd glibc
Requires(preun):	systemd glibc
%if 0%{?rhel} == 8
Requires:	python3-protobuf
%else
Requires:	protobuf-python
%endif


%description
VEOS is a set of daemons and commands providing operating system
functionality to VE programs.

%package	libveptrace
Summary:	VE ptrace library
License:	GPLv2+

%description	libveptrace
This package contains the VE ptrace library.

%package	devel
Summary:	Headers for VEOS
Requires:	%{name} = %{version}-%{release}
Requires:	%{name}-libveptrace = %{version}-%{release}

%description	devel
This package contains the files required to build system software
which uses VEOS functionality.
This package is not required to build VE programs or libraries.

%package	headers
License:	MIT
Summary:	Headers for VEOS

%description	headers
This package contains the header files of definitions of VEOS.
VE programs or libraries include them if required.

%package	libvepseudo-headers
License:	LGPLv2+ and BSD
Summary:	Headers for libvepseudo
Requires:	%{name} = %{version}-%{release}
Requires:	libved-devel >= 2.99.0 velayout-devel

%description	libvepseudo-headers
This package contains the header files of definition of libvepseudo.
VH programs or libraries using internal functions in libvepseudo
include them.

%define _prefix @prefix@
%define _sysconfdir @sysconfdir@
%define _localstatedir @localstatedir@

%if 0%{?rhel} == 8
%define _veos_py0  %{_prefix}/lib/python%{python3_version}/site-packages/*
%else
%define _veos_py0  %{_prefix}/lib/python%{python2_version}/site-packages/*
%define _veos_py1  %{_prefix}/lib/python%{python2_version}/site-packages/*/*
%endif


%prep
%setup -q
%if 0%{?rhel} == 8
pathfix.py -pn -i /usr/bin/python3 $RPM_BUILD_DIR/$RPM_PACKAGE_NAME-$RPM_PACKAGE_VERSION/scripts \
	   $RPM_BUILD_DIR/$RPM_PACKAGE_NAME-$RPM_PACKAGE_VERSION/scripts/ve_release_resource.in \
	   $RPM_BUILD_DIR/$RPM_PACKAGE_NAME-$RPM_PACKAGE_VERSION/scripts/ve_delete_process.in \
	   $RPM_BUILD_DIR/$RPM_PACKAGE_NAME-$RPM_PACKAGE_VERSION/scripts/ve_release_remote_resource.in \
	   $RPM_BUILD_DIR/$RPM_PACKAGE_NAME-$RPM_PACKAGE_VERSION/generate-arch_ops.py
%endif

%build
%configure \
  --with-vemm-agent-includedir=@VEMM_AGENT_INCLUDEDIR@ \
  --with-binfmtdir=@binfmtdir@ \
  --with-limitsdir=@limitsdir@ \
  --with-sysctldir=@sysctldir@ \
  --with-veldconfdir=@veldconfdir@ \
  --enable-memclear=@memclear@
make %{?_smp_mflags}

%install
make install DESTDIR=$RPM_BUILD_ROOT
sh -c "rm -f ${RPM_BUILD_ROOT}%{_libdir}/lib*.a \
      ${RPM_BUILD_ROOT}%{_libdir}/lib*.la"

%pre
if [ $1 -gt 1 ] ; then
    for dev in /dev/veslot*; do
	if [ $dev == '/dev/veslot*' ]; then
            break
	fi
	sysfs_path=/sys`/usr/bin/udevadm info -q path $dev`/os_state
	os_state=`cat $sysfs_path`
	if [ $os_state != "1" ]; then
            echo "Error: OS state is not offline"
            exit 1
	fi
    done
fi

%post
/sbin/ldconfig
if [ $1 -gt 1 ] ; then
    if /usr/bin/systemctl is-active ve-ived.service >/dev/null 2>&1; then
        /usr/bin/systemctl stop ve-ived.service
        /usr/bin/systemctl start ve-ived.service
    fi
fi
if [ $1 -ge 1 ] ; then
    /usr/sbin/sysctl --system >/dev/null 2>&1
fi
if [ $1 -eq 1 ] ; then
    /usr/bin/systemctl restart systemd-binfmt
fi
for no in `seq 0 7`; do
    mkdir --mode=ugo+rwxt -p %{_localstatedir}/veos${no}-tmp
done

if [ `systemd-detect-virt` == 'kvm' ];then
    if [ -e @ve_os_launcher_confdir@/veos_vm.options ];then
	sed -i s/#ve-os-launcher@/ve-os-launcher@/ @ve_os_launcher_confdir@/veos_vm.options
    fi
fi


%preun
for dev in /dev/veslot*; do
    if [ $dev == '/dev/veslot*' ]; then
        break
    fi
    sysfs_path=/sys`/usr/bin/udevadm info -q path $dev`/os_state
    os_state=`cat $sysfs_path`
    if [ $os_state != "1" ]; then
        echo "Error: OS state is not offline"
        exit 1
    fi
done

%postun
/sbin/ldconfig
# During uninstall argument is received 0, so deleting the directories
# During upgrade argument is received 1
if [ $1 == 0 ]; then
    for no in `seq 0 7`; do
	rm -fr %{_localstatedir}/veos${no}-tmp
    done
fi

%files
%config %{_sysconfdir}/log4crc
%config @binfmtdir@/ve.conf
%config @sysctldir@/10-veos.conf
%config @limitsdir@/10-veos.conf
%config @veldconfdir@/veos.conf
@ve_os_launcher_confdir@/ve-ived.options
@ve_os_launcher_confdir@/veos_timer.options
@ve_os_launcher_confdir@/veos_power_throttle.options
@ve_os_launcher_confdir@/veos_vm.options
%config(noreplace) @ve_os_launcher_confdir@/veswap.options
%config(noreplace) @ve_os_launcher_confdir@/vemodcode.options
%config(noreplace) %{_sysconfdir}/vemodcode.conf
%attr(0444,root,root) @prefix@/share/feature_list
@ve_bindir@/*
# GPLv2+
%{_sbindir}/*
@ve_libexecdir@/*
%{?_veos_py0}
%{?_veos_py1}
%{_libexecdir}/ve_coredump_helper
%{_libexecdir}/ve_release_resource
# LGPLv2+ and BSD and MIT
%{_libdir}/libvepseudo.so.*
%{_libexecdir}/ve_exec
%{_libdir}/libvhve.so.*
%{_libdir}/libveproductinfo.so.*
%doc

%files libveptrace
%{_libdir}/libveptrace.so.*

%files devel
%doc
%{_includedir}/*.h
%{_libdir}/*.so

%files headers
@ve_includedir@/*.h
@ve3_includedir@/*.h

%files libvepseudo-headers
# LGPLv2+
%{_includedir}/libvepseudo/*.h
%{_includedir}/libvepseudo/amm/*.h
%{_includedir}/libvepseudo/common/handle.h
%{_includedir}/libvepseudo/common/sys_common.h
%{_includedir}/libvepseudo/common/ve_syscall_no.h
%{_includedir}/libvepseudo/loader/loader.h
%{_includedir}/libvepseudo/psm/*.h
# BSD
%{_includedir}/libvepseudo/common/list.h
